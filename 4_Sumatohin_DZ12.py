import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram import F
from collections import defaultdict

bot = Bot(token="7599159158:AAFBKNHna16td-Kcfnkmaxbpc_GdrkA9LqM")
dp = Dispatcher()

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞ (–≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤)
quiz_data = [
    {
        'question': '1. –ß—Ç–æ —Ç–∞–∫–æ–µ Python?',
        'options': [
            '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è',
            '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä',
            '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'
        ],
        'correct_option': 0
    },
    {
        'question': '2. –†–∞–±–æ—Ç—É —Å –∫–∞–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Python?',
        'options': [
            '–¶–µ–ª—ã–µ —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏, —Å–ø–∏—Å–∫–∏, —Å–ª–æ–≤–∞—Ä–∏',
            '–¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ —Å—Ç—Ä–æ–∫–∏',
            '–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã',
            '–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
        ],
        'correct_option': 0
    },
    {
        'question': '3. –ß—Ç–æ —Ç–∞–∫–æ–µ PEP 8?',
        'options': [
            '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å—Ç–∏–ª—é –∫–æ–¥–∞ Python',
            '–í–µ—Ä—Å–∏—è Python 8',
            '–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏',
            '–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö'
        ],
        'correct_option': 0
    },
    {
        'question': '4. –ö–∞–∫ –≤ Python —Ä–∞–±–æ—Ç–∞–µ—Ç —É–º–Ω–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫?',
        'options': [
            '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑',
            '–ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏',
            '–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ –∏ —É–º–Ω–æ–∂–∞–µ—Ç',
            '–£–º–Ω–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
        ],
        'correct_option': 0
    },
    {
        'question': '5. –ö–∞–∫ –≤ Python —Ä–∞–±–æ—Ç–∞–µ—Ç —É–º–Ω–æ–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤?',
        'options': [
            '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑',
            '–ü–µ—Ä–µ–º–Ω–æ–∂–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –º–µ–∂–¥—É —Å–æ–±–æ–π',
            '–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∏–∑ —Å–ø–∏—Å–∫–æ–≤',
            '–£–º–Ω–æ–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
        ],
        'correct_option': 0
    },
    {
        'question': '6. –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏ –∏ –∫–æ—Ä—Ç–µ–∂–∞–º–∏?',
        'options': [
            '–°–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ–º—ã, –∫–æ—Ä—Ç–µ–∂–∏ –Ω–µ—Ç',
            '–ö–æ—Ä—Ç–µ–∂–∏ –∏–∑–º–µ–Ω—è–µ–º—ã, —Å–ø–∏—Å–∫–∏ –Ω–µ—Ç',
            '–ö–æ—Ä—Ç–µ–∂–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞',
            '–†–∞–∑–Ω–∏—Ü—ã –Ω–µ—Ç, —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ'
        ],
        'correct_option': 0
    },
    {
        'question': '7. –ö–∞–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –≤ Python?',
        'options': [
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–∑ [::-1]',
            '–ú–µ—Ç–æ–¥ reverse()',
            '–§—É–Ω–∫—Ü–∏—è reversed()',
            '–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–µ—Ä–Ω—ã'
        ],
        'correct_option': 3
    },
    {
        'question': '8. –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è range?',
        'options': [
            '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª',
            '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ',
            '–ù–∞—Ö–æ–¥–∏—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ',
            '–°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç'
        ],
        'correct_option': 0
    },
    {
        'question': '9. –ß—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ —Å–ª–æ–≤–∞—Ä—è?',
        'options': [
            '–ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö',
            '–õ—é–±—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö',
            '–¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏',
            '–¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞'
        ],
        'correct_option': 0
    },
    {
        'question': '10. –ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–¥ –Ω–∞ Python?',
        'options': [
            '–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ',
            '–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –≤ –º–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥',
            '–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –±–∞–π—Ç-–∫–æ–¥ Java',
            '–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–µ—Ä–Ω—ã'
        ],
        'correct_option': 0
    },
    {
        'question': '11. –ì–¥–µ –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–π: –≤ —Å–ø–∏—Å–∫–∞—Ö –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è—Ö?',
        'options': [
            '–í —Å–ª–æ–≤–∞—Ä—è—Ö (O(1) –≤ —Å—Ä–µ–¥–Ω–µ–º)',
            '–í —Å–ø–∏—Å–∫–∞—Ö (O(1))',
            '–°–∫–æ—Ä–æ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è',
            '–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö'
        ],
        'correct_option': 0
    }
]

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_quiz_index = {}  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_answers = {}     # –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_stats = defaultdict(dict)  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_shuffled_options = {}  # –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    builder.add(types.KeyboardButton(text="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Python –∫–≤–∏–∑!\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —è–∑—ã–∫–∞ Python.\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /quiz",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –∏ –∫–æ–º–∞–Ω–¥—É /stats
@dp.message(F.text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    stats = user_stats.get(user_id, {})
    
    if not stats:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ –∫–≤–∏–∑. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É!")
    else:
        await message.answer(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats.get('last_score', 0)}/{len(quiz_data)}\n"
            f"–í—Å–µ–≥–æ –∏–≥—Ä: {stats.get('total_played', 0)}"
        )

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" –∏ –∫–æ–º–∞–Ω–¥—É /quiz
@dp.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    user_id = message.from_user.id
    await new_quiz(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
@dp.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    current_index = await get_quiz_index(user_id)
    
    question_data = quiz_data[current_index]
    shuffled_options = user_shuffled_options[user_id][current_index]
    selected_option = int(callback.data.split("_")[1])
    
    original_correct_option = question_data['options'][question_data['correct_option']]
    correct_option_index = shuffled_options.index(original_correct_option)
    is_correct = selected_option == correct_option_index
    
    user_answers[user_id] = user_answers.get(user_id, [])
    user_answers[user_id].append({
        'question': question_data['question'],
        'selected': shuffled_options[selected_option],
        'correct': original_correct_option,
        'is_correct': is_correct
    })
    
    if is_correct:
        response_message = f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç: {shuffled_options[selected_option]}\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        response_message = f"‚ùå –í–∞—à –æ—Ç–≤–µ—Ç: {shuffled_options[selected_option]}\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {original_correct_option}"
    
    await callback.message.answer(response_message)
    
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    current_index += 1
    if current_index < len(quiz_data):
        await update_quiz_index(user_id, current_index)
        await get_question(callback.message, user_id)
    else:
        correct_answers = sum(1 for ans in user_answers[user_id] if ans['is_correct'])
        total_questions = len(quiz_data)
        
        user_stats[user_id]['last_score'] = correct_answers
        user_stats[user_id]['total_played'] = user_stats[user_id].get('total_played', 0) + 1
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_message = (
            f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers}/{total_questions}\n\n"
            f"üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤:\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
        for i, answer in enumerate(user_answers[user_id], 1):
            # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –≤–æ–ø—Ä–æ—Å–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å–∞–º–∏
            question_text = answer['question'].split('. ', 1)[1] if '. ' in answer['question'] else answer['question']
            
            if answer['is_correct']:
                result_message += (
                    f"{i}. {question_text}\n"
                    f"   ‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç: {answer['selected']}\n"
                    f"   (–ü—Ä–∞–≤–∏–ª—å–Ω–æ)\n\n"
                )
            else:
                result_message += (
                    f"{i}. {question_text}\n"
                    f"   ‚ùå –í–∞—à –æ—Ç–≤–µ—Ç: {answer['selected']}\n"
                    f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer['correct']}\n\n"
                )
        
        await callback.message.answer(result_message)
        await update_quiz_index(user_id, 0)
        del user_shuffled_options[user_id]

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
def generate_options_keyboard(options):
    builder = InlineKeyboardBuilder()
    for index, option in enumerate(options):
        builder.add(types.InlineKeyboardButton(
            text=option,
            callback_data=f"answer_{index}"
        ))
    builder.adjust(1)
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
async def get_question(message, user_id):
    current_index = await get_quiz_index(user_id)
    question_data = quiz_data[current_index]
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    shuffled_options = question_data['options'].copy()
    random.shuffle(shuffled_options)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if user_id not in user_shuffled_options:
        user_shuffled_options[user_id] = {}
    user_shuffled_options[user_id][current_index] = shuffled_options
    
    kb = generate_options_keyboard(shuffled_options)
    await message.answer(question_data['question'], reply_markup=kb)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞
async def new_quiz(message):
    user_id = message.from_user.id
    await update_quiz_index(user_id, 0)
    user_answers[user_id] = []  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∫–≤–∏–∑! –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É:")
    await get_question(message, user_id)

async def update_quiz_index(user_id, index):
    user_quiz_index[user_id] = index

async def get_quiz_index(user_id):
    return user_quiz_index.get(user_id, 0)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())